import { neon } from '@neondatabase/serverless';

// PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database
const DATABASE_URL = process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_ndU5X7kVHJwy@ep-cool-scene-a6ced7pu-pooler.c-2.eu-central-1.aws.neon.tech/neondb?sslmode=require';

const sql = neon(DATABASE_URL);

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
 */
export async function initDatabase() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–æ–Ω
    await sql`
      CREATE TABLE IF NOT EXISTS zones (
        id SERIAL PRIMARY KEY,
        name VARCHAR(50) NOT NULL,
        capacity INTEGER NOT NULL,
        is_vip BOOLEAN DEFAULT FALSE,
        branch VARCHAR(100) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    await sql`
      CREATE TABLE IF NOT EXISTS bookings (
        id SERIAL PRIMARY KEY,
        zone_id INTEGER REFERENCES zones(id) ON DELETE CASCADE,
        zone_name VARCHAR(50) NOT NULL,
        branch VARCHAR(100) NOT NULL,
        time VARCHAR(10) NOT NULL,
        name VARCHAR(255) NOT NULL,
        guests INTEGER NOT NULL,
        phone VARCHAR(20),
        status VARCHAR(20) DEFAULT 'pending',
        happy_hours BOOLEAN DEFAULT FALSE,
        comment TEXT,
        vr BOOLEAN DEFAULT FALSE,
        hookah BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ needs_cleaning –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–º–∏–≥—Ä–∞—Ü–∏—è)
    try {
      await sql`
        ALTER TABLE zones 
        ADD COLUMN IF NOT EXISTS needs_cleaning BOOLEAN DEFAULT FALSE
      `;
      console.log('‚úÖ –ü–æ–ª–µ needs_cleaning –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.log('‚ÑπÔ∏è –ü–æ–ª–µ needs_cleaning —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–æ–Ω—ã, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
    const zonesCount = await sql`SELECT COUNT(*) as count FROM zones`;
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–Ω –≤ –ë–î:', zonesCount[0].count);
    
    if (parseInt(zonesCount[0].count) === 0) {
      // –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —à. (22 –∑–æ–Ω—ã)
      const moscowZones = [
        { name: '–ó–æ–Ω–∞ 1', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 2', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 3', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 4', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 5', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 6', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 7', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 8', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 9', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 10', capacity: 5, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 11', capacity: 10, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 12', capacity: 6, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 13', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 14', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 15', capacity: 4, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 16', capacity: 6, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: 'VIP-17', capacity: 8, is_vip: true, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: 'VIP-18', capacity: 8, is_vip: true, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 19', capacity: 2, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 20', capacity: 2, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 21', capacity: 2, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
        { name: '–ó–æ–Ω–∞ 22', capacity: 2, is_vip: false, branch: '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.' },
      ];

      // –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã –¥–ª—è –ü–æ–ª–µ–≤–æ–π (20 –∑–æ–Ω)
      const polevayaZones = [
        { name: '–ó–æ–Ω–∞ 1', capacity: 4, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 2', capacity: 6, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 3', capacity: 4, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 4', capacity: 2, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 5', capacity: 4, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 6', capacity: 10, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 7', capacity: 4, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 8', capacity: 6, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 9', capacity: 6, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 10', capacity: 6, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 11', capacity: 2, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 12', capacity: 4, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 13', capacity: 10, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 14', capacity: 4, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 15', capacity: 4, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 16', capacity: 2, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 17', capacity: 4, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 18', capacity: 6, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 19', capacity: 6, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
        { name: '–ó–æ–Ω–∞ 20', capacity: 8, is_vip: false, branch: '–ü–æ–ª–µ–≤–∞—è' },
      ];

      // –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∑–æ–Ω—ã
      console.log('üìù –°–æ–∑–¥–∞—ë–º –∑–æ–Ω—ã...');
      const allZones = [...moscowZones, ...polevayaZones];
      for (const zone of allZones) {
        await sql`
          INSERT INTO zones (name, capacity, is_vip, branch)
          VALUES (${zone.name}, ${zone.capacity}, ${zone.is_vip}, ${zone.branch})
        `;
      }

      console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, —Å–æ–∑–¥–∞–Ω–æ –∑–æ–Ω: ${allZones.length} (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.: 22, –ü–æ–ª–µ–≤–∞—è: 20)`);
    } else {
      console.log('‚ÑπÔ∏è –ó–æ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
    }

    return { success: true, message: 'Database initialized' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–æ–Ω—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
 */
export async function getZonesWithBookings(branch = null) {
  try {
    let zones;
    
    if (branch) {
      zones = await sql`
        SELECT * FROM zones 
        WHERE branch = ${branch}
        ORDER BY id
      `;
    } else {
      zones = await sql`
        SELECT * FROM zones 
        ORDER BY id
      `;
    }

    console.log(`üìç –ù–∞–π–¥–µ–Ω–æ –∑–æ–Ω: ${zones.length}`, branch ? `–¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: ${branch}` : '');

    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–æ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (zones.length === 0) {
      return [];
    }

    // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –∑–æ–Ω
    const zoneIds = zones.map(z => z.id);
    const bookings = await sql`
      SELECT * FROM bookings 
      WHERE zone_id = ANY(${zoneIds})
    `;

    console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${bookings.length}`);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–æ–Ω—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
    const result = zones.map(zone => {
      const booking = bookings.find(b => b.zone_id === zone.id);
      
      return {
        id: zone.id,
        name: zone.name,
        capacity: zone.capacity,
        isVip: zone.is_vip,
        branch: zone.branch,
        needsCleaning: zone.needs_cleaning || false,
        booking: booking ? {
          id: booking.id,
          time: booking.time,
          name: booking.name,
          guests: booking.guests,
          phone: booking.phone,
          status: booking.status,
          happyHours: booking.happy_hours,
          comment: booking.comment,
          vr: booking.vr,
          hookah: booking.hookah,
          zone: booking.zone_name,
          branch: booking.branch
        } : null
      };
    });

    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export async function createBooking(zoneId, zoneName, branch, data) {
  try {
    const result = await sql`
      INSERT INTO bookings (
        zone_id, zone_name, branch, time, name, guests, 
        phone, status, happy_hours, comment, vr, hookah
      )
      VALUES (
        ${zoneId}, ${zoneName}, ${branch}, ${data.time}, ${data.name}, 
        ${data.guests}, ${data.phone || ''}, ${data.status || 'pending'}, 
        ${data.happyHours || false}, ${data.comment || ''}, 
        ${data.vr || false}, ${data.hookah || false}
      )
      RETURNING *
    `;

    return result[0];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export async function updateBooking(bookingId, data) {
  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const current = await sql`SELECT * FROM bookings WHERE id = ${bookingId}`;
    if (current.length === 0) {
      throw new Error('Booking not found');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    const updated = {
      time: data.time !== undefined ? data.time : current[0].time,
      name: data.name !== undefined ? data.name : current[0].name,
      guests: data.guests !== undefined ? data.guests : current[0].guests,
      phone: data.phone !== undefined ? data.phone : current[0].phone,
      status: data.status !== undefined ? data.status : current[0].status,
      happy_hours: data.happyHours !== undefined ? data.happyHours : current[0].happy_hours,
      comment: data.comment !== undefined ? data.comment : current[0].comment,
      vr: data.vr !== undefined ? data.vr : current[0].vr,
      hookah: data.hookah !== undefined ? data.hookah : current[0].hookah,
    };

    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏ #${bookingId}:`, data);

    const result = await sql`
      UPDATE bookings 
      SET 
        time = ${updated.time},
        name = ${updated.name},
        guests = ${updated.guests},
        phone = ${updated.phone},
        status = ${updated.status},
        happy_hours = ${updated.happy_hours},
        comment = ${updated.comment},
        vr = ${updated.vr},
        hookah = ${updated.hookah},
        updated_at = CURRENT_TIMESTAMP
      WHERE id = ${bookingId}
      RETURNING *
    `;

    console.log(`‚úÖ –ë—Ä–æ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`, result[0]);
    return result[0];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export async function deleteBooking(bookingId, skipCleaningFlag = false) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º zone_id –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const booking = await sql`
      SELECT zone_id FROM bookings 
      WHERE id = ${bookingId}
    `;

    await sql`
      DELETE FROM bookings 
      WHERE id = ${bookingId}
    `;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ "—Ç—Ä–µ–±—É–µ—Ç —É–±–æ—Ä–∫–∏" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (skipCleaningFlag=false)
    if (!skipCleaningFlag && booking.length > 0) {
      await sql`
        UPDATE zones 
        SET needs_cleaning = TRUE 
        WHERE id = ${booking[0].zone_id}
      `;
      console.log(`üßπ –ó–æ–Ω–∞ #${booking[0].zone_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è —É–±–æ—Ä–∫–∏`);
    }

    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function updateBookingStatus(bookingId, status) {
  try {
    const result = await sql`
      UPDATE bookings 
      SET status = ${status}, updated_at = CURRENT_TIMESTAMP
      WHERE id = ${bookingId}
      RETURNING *
    `;

    return result[0];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∏–ª–∏–∞–ª–µ
 */
export async function clearAllBookings(branch) {
  try {
    const result = await sql`
      DELETE FROM bookings 
      WHERE branch = ${branch}
    `;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —É–±–æ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω –≤ —Ñ–∏–ª–∏–∞–ª–µ
    await sql`
      UPDATE zones 
      SET needs_cleaning = FALSE 
      WHERE branch = ${branch}
    `;

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –±—Ä–æ–Ω–µ–π –≤ —Ñ–∏–ª–∏–∞–ª–µ ${branch}: ${result.count || 0}`);
    console.log(`üßπ –°–±—Ä–æ—à–µ–Ω—ã —Ñ–ª–∞–≥–∏ —É–±–æ—Ä–∫–∏ –¥–ª—è –∑–æ–Ω –≤ ${branch}`);
    return { success: true, deletedCount: result.count || 0 };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π:', error);
    throw error;
  }
}

/**
 * –û—Ç–º–µ—Ç–∏—Ç—å –∑–æ–Ω—É –∫–∞–∫ —É–±—Ä–∞–Ω–Ω—É—é
 */
export async function markZoneCleaned(zoneId) {
  try {
    await sql`
      UPDATE zones 
      SET needs_cleaning = FALSE 
      WHERE id = ${zoneId}
    `;

    console.log(`‚ú® –ó–æ–Ω–∞ #${zoneId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–±—Ä–∞–Ω–Ω–∞—è`);
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–æ–Ω—ã –∫–∞–∫ —É–±—Ä–∞–Ω–Ω–æ–π:', error);
    throw error;
  }
}

export default sql;

