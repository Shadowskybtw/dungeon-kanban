import React, { useState, useEffect, useCallback } from 'react';
import Header from './components/Header';
import ZoneCard from './components/ZoneCard';
import EditModal from './components/EditModal';
import { ToastContainer } from './components/Toast';
import { fetchBookings, updateBookingStatus, deleteBooking, updateBooking, createBooking, clearAllBookings, markZoneCleaned, completeBooking } from './services/api';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞
 * v1.0.1 - –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–æ–Ω—ã: 22 –ú–°–ö, 20 –ü–æ–ª–µ–≤–∞—è
 */
function App() {
  const [zones, setZones] = useState([]);
  const [selectedBranch, setSelectedBranch] = useState('–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à.');
  const [statusFilter, setStatusFilter] = useState('all');
  const [lastUpdate, setLastUpdate] = useState(new Date());
  const [isLoading, setIsLoading] = useState(false);
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [editingBooking, setEditingBooking] = useState(null);
  const [editingZone, setEditingZone] = useState(null);
  const [isCreating, setIsCreating] = useState(false);
  const [toasts, setToasts] = useState([]);

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const addToast = (message, type = 'info', duration = 3000) => {
    const id = Date.now();
    setToasts(prev => [...prev, { id, message, type, duration }]);
  };

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const removeToast = (id) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
  const loadData = useCallback(async (showSuccess = false) => {
    setIsLoading(true);
    try {
      const data = await fetchBookings(selectedBranch);
      setZones(data);
      setLastUpdate(new Date());
      if (showSuccess) {
        addToast('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      addToast('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π', 'error');
    } finally {
      setIsLoading(false);
    }
  }, [selectedBranch]);

  // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    loadData();
    const interval = setInterval(loadData, 30000);
    return () => clearInterval(interval);
  }, [loadData]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ñ–∏–ª–∏–∞–ª–∞
  const handleBranchChange = (branch) => {
    setSelectedBranch(branch);
  };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleStatusChange = async (bookingId, newStatus) => {
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      setZones(prevZones => prevZones.map(zone => {
        // –ò—â–µ–º –±—Ä–æ–Ω—å –≤ –º–∞—Å—Å–∏–≤–µ bookings
        const bookingIndex = zone.bookings?.findIndex(b => b.id === bookingId);
        if (bookingIndex !== undefined && bookingIndex !== -1) {
          const updatedBookings = [...zone.bookings];
          updatedBookings[bookingIndex] = {
            ...updatedBookings[bookingIndex],
            status: newStatus
          };
          return {
            ...zone,
            bookings: updatedBookings,
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏ booking –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            booking: updatedBookings[0] || null
          };
        }
        return zone;
      }));

      try {
        await updateBookingStatus(bookingId, newStatus);
        addToast('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω', 'success');
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        setTimeout(() => loadData(), 500);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        addToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', 'error');
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        loadData();
      }
    };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏
  const handleCreate = (zone) => {
    setEditingZone(zone);
    setEditingBooking(null);
    setIsCreating(true);
    setEditModalOpen(true);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleEdit = (booking) => {
    const zone = zones.find(z => z.booking?.id === booking.id);
    setEditingBooking(booking);
    setEditingZone(zone);
    setIsCreating(false);
    setEditModalOpen(true);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
  const handleSaveEdit = async (bookingId, newData) => {
    try {
      if (isCreating) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ - –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const newBookingId = `temp-${Date.now()}`;
        const newBooking = {
          id: newBookingId,
          ...newData,
          zone: editingZone.name,
          branch: selectedBranch
        };

        setZones(prevZones => prevZones.map(zone => {
          if (zone.id === editingZone.id) {
            return {
              ...zone,
              booking: newBooking
            };
          }
          return zone;
        }));

        await createBooking(editingZone.id, editingZone.name, selectedBranch, newData);
        addToast('‚úÖ –ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞', 'success');
      } else {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π - –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        setZones(prevZones => prevZones.map(zone => {
          if (zone.booking?.id === bookingId) {
            return {
              ...zone,
              booking: {
                ...zone.booking,
                ...newData
              }
            };
          }
          return zone;
        }));

        await updateBooking(bookingId, newData);
        addToast('‚úÖ –ë—Ä–æ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => loadData(), 1000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      addToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—Ä–æ–Ω—å', 'error');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      loadData();
    }
  };

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —á–∞—Å–æ–≤
    const handleHappyHoursToggle = async (bookingId, enabled) => {
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      setZones(prevZones => prevZones.map(zone => {
        // –ò—â–µ–º –±—Ä–æ–Ω—å –≤ –º–∞—Å—Å–∏–≤–µ bookings
        const bookingIndex = zone.bookings?.findIndex(b => b.id === bookingId);
        if (bookingIndex !== undefined && bookingIndex !== -1) {
          const updatedBookings = [...zone.bookings];
          updatedBookings[bookingIndex] = {
            ...updatedBookings[bookingIndex],
            happyHours: enabled
          };
          return {
            ...zone,
            bookings: updatedBookings,
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏ booking –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            booking: updatedBookings[0] || null
          };
        }
        return zone;
      }));

      try {
        await updateBooking(bookingId, { happyHours: enabled });
        addToast(enabled ? 'üéâ –°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!' : '–°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∞—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã', 'success');
        setTimeout(() => loadData(), 500);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —á–∞—Å–æ–≤:', error);
        addToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', 'error');
        loadData();
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleDelete = async (bookingId, guestName) => {
      const choice = confirm(
        `–£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω—å "${guestName}"?\n\n–û–ö = –ì–æ—Å—Ç—å –Ω–µ –ø—Ä–∏—à–µ–ª (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é + —É–±–æ—Ä–∫–∞)\n–û—Ç–º–µ–Ω–∞ = –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å + –±–µ–∑ —É–±–æ—Ä–∫–∏)`
      );
      
      if (choice === null) return; // –ù–∞–∂–∞–ª–∏ ESC
      
      try {
        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º –±—Ä–æ–Ω—å
        setZones(prevZones => prevZones.map(zone => ({
          ...zone,
          bookings: zone.bookings ? zone.bookings.filter(b => b.id !== bookingId) : [],
          booking: zone.bookings && zone.bookings.length > 0 && zone.bookings[0].id === bookingId 
            ? (zone.bookings[1] || null) 
            : zone.booking
        })));

        if (choice) {
          // OK - –≥–æ—Å—Ç—å –Ω–µ –ø—Ä–∏—à–µ–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é + –ø–æ–º–µ—á–∞–µ–º –∑–æ–Ω—É –¥–ª—è —É–±–æ—Ä–∫–∏
          await completeBooking(bookingId, 'no_show');
          addToast('üö´ –ë—Ä–æ–Ω—å —É–¥–∞–ª–µ–Ω–∞ (–≥–æ—Å—Ç—å –Ω–µ –ø—Ä–∏—à–µ–ª) - –∑–æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç —É–±–æ—Ä–∫–∏', 'error');
        } else {
          // –û—Ç–º–µ–Ω–∞ - –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –ë–ï–ó —É–±–æ—Ä–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º deleteBooking)
          await deleteBooking(bookingId);
          addToast('üóëÔ∏è –ë—Ä–æ–Ω—å —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
        
        setTimeout(() => loadData(), 500);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        addToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω—å', 'error');
        loadData();
      }
    };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const handleClearAll = async () => {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ñ–∏–ª–∏–∞–ª–µ "${selectedBranch}"?`)) {
      try {
        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏
        setZones(prevZones => prevZones.map(zone => ({
          ...zone,
          booking: null
        })));

        await clearAllBookings(selectedBranch);
        addToast('üóëÔ∏è –í—Å–µ –±—Ä–æ–Ω–∏ –æ—á–∏—â–µ–Ω—ã', 'success');
        setTimeout(() => loadData(), 500);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π:', error);
        addToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –±—Ä–æ–Ω–∏', 'error');
        loadData();
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–æ–Ω—ã –∫–∞–∫ —É–±—Ä–∞–Ω–Ω–æ–π
  const handleMarkCleaned = async (zoneId) => {
    try {
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —É–±–æ—Ä–∫–∏
      setZones(prevZones => prevZones.map(zone => 
        zone.id === zoneId ? { ...zone, needsCleaning: false } : zone
      ));

      await markZoneCleaned(zoneId);
      addToast('‚ú® –ó–æ–Ω–∞ —É–±—Ä–∞–Ω–∞', 'success');
      setTimeout(() => loadData(), 500);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–æ–Ω—ã –∫–∞–∫ —É–±—Ä–∞–Ω–Ω–æ–π:', error);
      addToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–æ–Ω—É', 'error');
      loadData();
    }
  };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≥–æ—Å—Ç—å –ø—Ä–∏—à–µ–ª)
    const handleComplete = async (bookingId, guestName) => {
      if (!confirm(`–ì–æ—Å—Ç—å "${guestName}" –ø—Ä–∏—à–µ–ª?\n\n–ë—Ä–æ–Ω—å –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`)) {
        return; // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      }
      
      try {
        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º –±—Ä–æ–Ω—å
        setZones(prevZones => prevZones.map(zone => ({
          ...zone,
          bookings: zone.bookings ? zone.bookings.filter(b => b.id !== bookingId) : [],
          booking: zone.bookings && zone.bookings.length > 0 && zone.bookings[0].id === bookingId 
            ? (zone.bookings[1] || null) 
            : zone.booking
        })));

        await completeBooking(bookingId, 'completed');
        addToast('‚úÖ –ë—Ä–æ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≥–æ—Å—Ç—å –ø—Ä–∏—à–µ–ª) - –∑–æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç —É–±–æ—Ä–∫–∏', 'success');
        
        setTimeout(() => loadData(), 500);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏:', error);
        addToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –±—Ä–æ–Ω—å', 'error');
        loadData();
      }
    };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –±—Ä–æ–Ω–∏ –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏
  const handleMoveBooking = async (bookingId, sourceZoneId, targetZoneId, booking) => {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –°–ù–ê–ß–ê–õ–ê
      await updateBooking(bookingId, { zone_id: targetZoneId });
      
      // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î –æ–±–Ω–æ–≤–ª—è–µ–º UI
      setZones(prevZones => prevZones.map(zone => {
        if (zone.id === sourceZoneId) {
          // –£–±–∏—Ä–∞–µ–º –±—Ä–æ–Ω—å –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∑–æ–Ω—ã
          return {
            ...zone,
            bookings: zone.bookings ? zone.bookings.filter(b => b.id !== bookingId) : []
          };
        } else if (zone.id === targetZoneId) {
          // –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ–Ω—å –≤ —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë —Ç–∞–º –µ—â–µ –Ω–µ—Ç
          const existingBooking = zone.bookings?.find(b => b.id === bookingId);
          if (!existingBooking) {
            return {
              ...zone,
              bookings: [...(zone.bookings || []), { ...booking, zone_id: targetZoneId }]
            };
          }
        }
        return zone;
      }));

      addToast(`‚úÖ –ë—Ä–æ–Ω—å "${booking.name}" –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ ${zones.find(z => z.id === targetZoneId)?.name}`, 'success');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –±—Ä–æ–Ω–∏:', error);
      addToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±—Ä–æ–Ω—å', 'error');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      loadData();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const handleRefresh = () => {
    loadData(true);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–æ–Ω –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const filteredZones = zones.filter(zone => {
    if (statusFilter === 'all') return true;
    if (!zone.booking) return false;
    
    switch (statusFilter) {
      case 'active':
        return zone.booking.status === 'active';
      case 'pending':
        return zone.booking.status === 'pending';
      default:
        return true;
    }
  });

  return (
    <div className="h-screen overflow-hidden bg-gradient-to-br from-dungeon-dark via-dungeon-darker to-dungeon-dark flex flex-col">
      {/* –§–æ–Ω–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-dungeon-neon-green/5 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-dungeon-neon-purple/5 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '1s' }}></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-dungeon-neon-blue/5 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '2s' }}></div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="relative z-10 flex flex-col h-full">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ */}
        <div className="flex-none">
          <Header
            selectedBranch={selectedBranch}
            onBranchChange={handleBranchChange}
            statusFilter={statusFilter}
            onStatusFilterChange={setStatusFilter}
            onRefresh={handleRefresh}
            onClearAll={handleClearAll}
            lastUpdate={lastUpdate}
            totalZones={zones.length}
          />
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞ –∑–æ–Ω - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ */}
        <main className="flex-1 overflow-y-auto">
          <div className="container mx-auto px-2 py-2">
            {isLoading && zones.length === 0 ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <div className="inline-block animate-spin rounded-full h-12 w-12 border-4 border-dungeon-neon-green border-t-transparent mb-4"></div>
                  <p className="text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                </div>
              </div>
            ) : filteredZones.length === 0 ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <div className="text-6xl mb-4">üîç</div>
                  <p className="text-gray-400 text-lg">–ù–µ—Ç –∑–æ–Ω, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É</p>
                </div>
              </div>
            ) : (
              <div className="grid gap-2 zones-grid">
                {filteredZones.map(zone => (
                <ZoneCard
                  key={zone.id}
                  zone={zone}
                  onStatusChange={handleStatusChange}
                  onEdit={handleEdit}
                  onDelete={handleDelete}
                  onCreate={handleCreate}
                  onHappyHoursToggle={handleHappyHoursToggle}
                  onMarkCleaned={handleMarkCleaned}
                  onComplete={handleComplete}
                  onMoveBooking={handleMoveBooking}
                />
                ))}
              </div>
            )}
          </div>
        </main>

        {/* –§—É—Ç–µ—Ä - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π */}
        <footer className="flex-none px-4 py-2 text-center text-gray-500 text-xs border-t border-dungeon-gray/20">
          <div className="container mx-auto flex items-center justify-between">
            <p>¬© 2025 DUNGEON v1.0.3</p>
            <div className="flex items-center gap-6">
              <div className="flex items-center gap-3">
                <div className="flex items-center gap-1">
                  <span className="text-dungeon-neon-green">‚úÖ</span>
                  <span className="font-semibold text-dungeon-neon-green">{zones.filter(z => z.booking?.status === 'active').length}</span>
                </div>
                <div className="flex items-center gap-1">
                  <span className="text-red-500">‚è≥</span>
                  <span className="font-semibold text-red-500">{zones.filter(z => z.booking?.status === 'pending').length}</span>
                </div>
                <div className="flex items-center gap-1">
                  <span className="text-gray-400">üì≠</span>
                  <span className="font-semibold text-gray-400">{zones.filter(z => !z.booking).length}</span>
                </div>
              </div>
              <p>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 30 —Å–µ–∫</p>
            </div>
          </div>
        </footer>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è */}
      <EditModal
        booking={editingBooking}
        zone={editingZone}
        isOpen={editModalOpen}
        onClose={() => {
          setEditModalOpen(false);
          setIsCreating(false);
        }}
        onSave={handleSaveEdit}
        isCreating={isCreating}
      />

      {/* Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <ToastContainer toasts={toasts} removeToast={removeToast} />
    </div>
  );
}

export default App;




